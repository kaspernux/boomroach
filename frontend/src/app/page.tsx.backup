"use client";

import { useState, useEffect } from 'react'
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  AreaChart,
  Area,
  BarChart,
  Bar
} from 'recharts'
import {
  Activity,
  ArrowDown,
  ArrowRight,
  ArrowUp,
  BarChart3,
  Bot,
  Brain,
  Calendar,
  CheckCircle,
  ChevronDown,
  Clock,
  Coins,
  Crown,
  DollarSign,
  Download,
  Eye,
  Filter,
  Flame,
  Gift,
  Github,
  Globe,
  Heart,
  Image,
  Lock,
  Mail,
  MapPin,
  MessageCircle,
  Percent,
  PlayCircle,
  RefreshCw,
  Rocket,
  Search,
  Send,
  Settings,
  Share2,
  Shield,
  Star,
  StopCircle,
  Target,
  ThumbsUp,
  Trending,
  TrendingUp,
  Trophy,
  Twitter,
  Unlock,
  Upload,
  Users,
  Vote,
  Zap,
} from "lucide-react";

// Import the new production components
import { CompactWalletButton, WalletStatus } from '@/components/WalletButton'
import { usePriceFeeds } from '@/hooks/usePriceFeeds'
import { 
  StaggerContainer, 
  StaggerItem,
  SlideUp, 
  ScaleOnHover, 
  ParallaxElement,
  TypewriterText,
  MagneticButton,
  AnimatedCounter,
  RevealOnScroll,
  PulseGlow,
  FloatingElement
} from '@/components/animations/MobileAnimations'
import { 
  HydraAPIService, 
  DAOAPIService, 
  useRealTimeSignals, 
  useRealTimeBotPerformance 
} from '@/lib/api'

export default function HomePage() {
  const [mounted, setMounted] = useState(false);
  
  // Use real price feeds instead of mock data
  const { priceData, loading: priceLoading, error: priceError } = usePriceFeeds();
  
  // Use real trading signals and bot performance
  const { signals, loading: signalsLoading } = useRealTimeSignals();
  const { performance, loading: performanceLoading } = useRealTimeBotPerformance();

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <div className="min-h-screen bg-background" />;
  }

  return (
    <div className="min-h-screen bg-background text-foreground overflow-hidden">
      {/* Navigation */}
      <nav className="fixed top-0 w-full z-50 glassmorphism border-b border-neon-orange/20">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <SlideUp className="flex items-center space-x-2">
            <div className="text-2xl font-pixel text-neon-orange text-glow">
              $BOOMROACH
            </div>
            <PulseGlow>
              <Badge className="bg-nuclear-glow/20 text-nuclear-glow border-nuclear-glow/30 animate-pulse-glow">
                2025 EDITION
              </Badge>
            </PulseGlow>
          </SlideUp>

          <StaggerContainer className="hidden md:flex items-center space-x-6">
            <StaggerItem>
              <a
                href="#about"
                className="hover:text-neon-orange transition-colors"
              >
                About
              </a>
            </StaggerItem>
            <StaggerItem>
              <a
                href="#tokenomics"
                className="hover:text-neon-orange transition-colors"
              >
                Tokenomics
              </a>
            </StaggerItem>
            <StaggerItem>
              <a
                href="#hydra-bot"
                className="hover:text-neon-orange transition-colors"
              >
                Hydra Bot
              </a>
            </StaggerItem>
            <StaggerItem>
              <a
                href="#roadmap"
                className="hover:text-neon-orange transition-colors"
              >
                Roadmap
              </a>
            </StaggerItem>
            <StaggerItem>
              <a
                href="#community"
                className="hover:text-neon-orange transition-colors"
              >
                Community
              </a>
            </StaggerItem>
          </StaggerContainer>

          <div className="flex items-center space-x-4">
            <div className="hidden sm:flex items-center space-x-2 font-mono text-sm">
              <span className="text-neon-green">
                $<AnimatedCounter from={0} to={priceData.price} duration={1} prefix="" suffix="" className="inline" />
              </span>
              <Separator orientation="vertical" className="h-4" />
              <span className="text-neon-blue">
                <AnimatedCounter from={0} to={priceData.holders || 12483} duration={2} prefix="" suffix=" holders" className="inline" />
              </span>
            </div>
            <WalletStatus />
            <MagneticButton>
              <CompactWalletButton />
            </MagneticButton>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="relative min-h-screen flex items-center justify-center particles-bg">
        <ParallaxElement offset={-50}>
          <div className="absolute inset-0 bg-gradient-to-br from-background via-background to-neon-orange/5" />
        </ParallaxElement>

        <div className="relative z-10 container mx-auto px-4 text-center">
          <div className="max-w-6xl mx-auto">
            {/* Floating Badges */}
            <StaggerContainer className="flex justify-center space-x-4 mb-8" delay={0.2}>
              <StaggerItem>
                <FloatingElement amplitude={8}>
                  <ScaleOnHover>
                    <Badge className="bg-neon-orange/20 text-neon-orange border-neon-orange/30 text-xs px-3 py-1">
                      <Crown className="w-3 h-3 mr-1" />
                      #1 SOLANA MEME
                    </Badge>
                  </ScaleOnHover>
                </FloatingElement>
              </StaggerItem>
              <StaggerItem>
                <FloatingElement amplitude={10}>
                  <ScaleOnHover>
                    <Badge className="bg-neon-green/20 text-neon-green border-neon-green/30 text-xs px-3 py-1">
                      <Flame className="w-3 h-3 mr-1" />
                      NUCLEAR POWERED
                    </Badge>
                  </ScaleOnHover>
                </FloatingElement>
              </StaggerItem>
              <StaggerItem>
                <FloatingElement amplitude={12}>
                  <ScaleOnHover>
                    <Badge className="bg-neon-blue/20 text-neon-blue border-neon-blue/30 text-xs px-3 py-1">
                      <Bot className="w-3 h-3 mr-1" />
                      AI TRADING BOT
                    </Badge>
                  </ScaleOnHover>
                </FloatingElement>
              </StaggerItem>
            </StaggerContainer>

            {/* Main Title */}
            <RevealOnScroll direction="up" delay={0.3}>
              <h1 className="text-4xl md:text-7xl lg:text-8xl font-pixel text-glow mb-6 leading-tight">
                <span className="text-neon-orange">$BOOM</span>
                <span className="text-foreground">ROACH</span>
              </h1>
            </RevealOnScroll>

            <RevealOnScroll direction="up" delay={0.5}>
              <div className="text-xl md:text-3xl lg:text-4xl font-bold mb-4">
                <TypewriterText 
                  text="THE UNKILLABLE MEME COIN" 
                  className="nuclear-gradient bg-clip-text text-transparent"
                  speed={100}
                />
              </div>
            </RevealOnScroll>

            <RevealOnScroll direction="up" delay={0.7}>
              <p className="text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto mb-8 leading-relaxed">
                Powered by{" "}
                <span className="text-neon-orange font-semibold">
                  Hydra AI Bot
                </span>
                , fueled by{" "}
                <span className="text-nuclear-glow font-semibold">
                  nuclear energy
                </span>
                , and backed by an{" "}
                <span className="text-neon-blue font-semibold">
                  unstoppable community
                </span>
                . The roach that survives everything and multiplies profits.
              </p>
            </RevealOnScroll>

            {/* Live Stats */}
            <StaggerContainer className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-12" delay={0.9}>
              <StaggerItem>
                <ScaleOnHover>
                  <Card className="glassmorphism border-neon-orange/30 hover-glow">
                    <CardContent className="p-6 text-center">
                      <div className="text-3xl font-bold text-neon-orange mb-2">
                        $<AnimatedCounter from={0} to={priceData.price} duration={2} />
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Current Price
                      </div>
                      <div className="text-xs text-neon-green mt-1">
                        <TrendingUp className="w-3 h-3 inline mr-1" />
                        +<AnimatedCounter from={0} to={priceData.priceChange24h} duration={1.5} suffix="% (24h)" />
                      </div>
                    </CardContent>
                  </Card>
                </ScaleOnHover>
              </StaggerItem>

              <StaggerItem>
                <ScaleOnHover>
                  <Card className="glassmorphism border-nuclear-glow/30 hover-glow">
                    <CardContent className="p-6 text-center">
                      <div className="text-3xl font-bold text-nuclear-glow mb-2">
                        $<AnimatedCounter from={0} to={priceData.marketCap / 1000000} duration={2} suffix="M" />
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Market Cap
                      </div>
                      <div className="text-xs text-neon-green mt-1">
                        <Target className="w-3 h-3 inline mr-1" />
                        Live Trading
                      </div>
                    </CardContent>
                  </Card>
                </ScaleOnHover>
              </StaggerItem>

              <StaggerItem>
                <ScaleOnHover>
                  <Card className="glassmorphism border-neon-blue/30 hover-glow">
                    <CardContent className="p-6 text-center">
                      <div className="text-3xl font-bold text-neon-blue mb-2">
                        <AnimatedCounter from={0} to={priceData.holders || 12483} duration={2} />
                      </div>
                      <div className="text-sm text-muted-foreground">Holders</div>
                      <div className="text-xs text-neon-green mt-1">
                        <Users className="w-3 h-3 inline mr-1" />
                        Growing Daily
                      </div>
                    </CardContent>
                  </Card>
                </ScaleOnHover>
              </StaggerItem>
            </StaggerContainer>

            {/* CTA Buttons */}
            <StaggerContainer className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-12" delay={1.1}>
              <StaggerItem>
                <MagneticButton strength={0.4}>
                  <PulseGlow>
                    <Button
                      size="lg"
                      className="nuclear-gradient hover-glow text-lg px-8 py-6 font-semibold"
                    >
                      <Rocket className="w-5 h-5 mr-2" />
                      Buy $BOOMROACH
                      <ArrowRight className="w-5 h-5 ml-2" />
                    </Button>
                  </PulseGlow>
                </MagneticButton>
              </StaggerItem>

              <StaggerItem>
                <MagneticButton strength={0.3}>
                  <Button
                    size="lg"
                    variant="outline"
                    className="border-neon-orange text-neon-orange hover:bg-neon-orange/10 hover-glow text-lg px-8 py-6"
                  >
                    <Bot className="w-5 h-5 mr-2" />
                    Try Hydra Bot
                  </Button>
                </MagneticButton>
              </StaggerItem>

              <StaggerItem>
                <MagneticButton strength={0.3}>
                  <Button
                    size="lg"
                    variant="outline"
                    className="border-neon-blue text-neon-blue hover:bg-neon-blue/10 hover-glow text-lg px-8 py-6"
                  >
                    <Star className="w-5 h-5 mr-2" />
                    Join DAO
                  </Button>
                </MagneticButton>
              </StaggerItem>
            </StaggerContainer>

            {/* Scroll Indicator */}
            <div className="animate-bounce">
              <ChevronDown className="w-8 h-8 mx-auto text-neon-orange opacity-70" />
            </div>
          </div>
        </div>

        {/* Roach Images */}
        <div className="absolute top-20 left-10 w-16 h-16 opacity-20 animate-float">
          <img
            src="https://ext.same-assets.com/3224214395/4224792650.png"
            alt="Roach"
            className="w-full h-full object-contain filter hue-rotate-30"
          />
        </div>
        <div
          className="absolute bottom-20 right-10 w-20 h-20 opacity-30 animate-float"
          style={{ animationDelay: "1s" }}
        >
          <img
            src="https://ext.same-assets.com/3224214395/842254662.png"
            alt="Roach"
            className="w-full h-full object-contain filter hue-rotate-60"
          />
        </div>
        <div
          className="absolute top-1/2 left-5 w-12 h-12 opacity-15 animate-float"
          style={{ animationDelay: "2s" }}
        >
          <img
            src="https://ext.same-assets.com/3224214395/1748105708.png"
            alt="Roach"
            className="w-full h-full object-contain filter hue-rotate-90"
          />
        </div>
      </section>
      <section id="about" className="py-20 relative">
        <div className="container mx-auto px-4">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-6xl font-pixel text-glow mb-6">
                <span className="text-neon-orange">WHAT IS</span>{" "}
                <span className="text-foreground">$BOOMROACH?</span>
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                The meme coin that refuses to die. Born from chaos, powered by
                AI, and multiplied by an unstoppable community.
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
              <div className="space-y-6">
                <Card className="glassmorphism border-neon-orange/30 hover-glow">
                  <CardHeader>
                    <CardTitle className="flex items-center text-neon-orange">
                      <Shield className="w-6 h-6 mr-2" />
                      Nuclear Resistant
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      Like a cockroach surviving a nuclear blast, $BOOMROACH is
                      built to withstand any market crash, rug pull, or crypto
                      winter. We've seen it all and lived to tell the tale.
                    </p>
                  </CardContent>
                </Card>

                <Card className="glassmorphism border-nuclear-glow/30 hover-glow">
                  <CardHeader>
                    <CardTitle className="flex items-center text-nuclear-glow">
                      <Bot className="w-6 h-6 mr-2" />
                      AI-Powered Trading
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      Our Hydra Bot system uses advanced AI to snipe profitable
                      trades, manage risk, and automatically buy back $BOOMROACH
                      tokens to support the price.
                    </p>
                  </CardContent>
                </Card>

                <Card className="glassmorphism border-neon-blue/30 hover-glow">
                  <CardHeader>
                    <CardTitle className="flex items-center text-neon-blue">
                      <Users className="w-6 h-6 mr-2" />
                      Community Owned
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      100% community-driven with DAO governance. No dev tax, no
                      VC control. The roaches rule themselves through democratic
                      voting and memes.
                    </p>
                  </CardContent>
                </Card>
              </div>

              <div className="relative">
                <div className="aspect-square glassmorphism rounded-3xl p-8 border-neon-orange/30 hover-glow">
                  <div className="w-full h-full flex items-center justify-center">
                    <img
                      src="https://ext.same-assets.com/3224214395/4224792650.png"
                      alt="BoomRoach Mascot"
                      className="w-3/4 h-3/4 object-contain animate-float filter drop-shadow-2xl"
                    />
                  </div>
                </div>
                <div className="absolute -top-4 -right-4 w-24 h-24 nuclear-gradient rounded-full flex items-center justify-center animate-pulse-glow">
                  <Zap className="w-12 h-12 text-background" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <section
        id="tokenomics"
        className="py-20 relative bg-gradient-to-br from-background to-neon-orange/5"
      >
        <div className="container mx-auto px-4">
          <div className="max-w-7xl mx-auto">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-6xl font-pixel text-glow mb-6">
                <span className="text-neon-orange">TOKEN</span>
                <span className="text-foreground">OMICS</span>
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                Built for sustainability, powered by utility, designed for
                growth. Every mechanism serves the roach army.
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
              {/* Token Distribution Chart */}
              <Card className="glassmorphism border-neon-orange/30 hover-glow p-8">
                <CardHeader className="text-center">
                  <CardTitle className="text-2xl font-pixel text-neon-orange mb-4">
                    <PieChart className="w-8 h-8 inline mr-2" />
                    Token Distribution
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={[
                            { name: "Community", value: 70, color: "#ff6b35" },
                            {
                              name: "Liquidity Pool",
                              value: 20,
                              color: "#00d9ff",
                            },
                            {
                              name: "Development",
                              value: 10,
                              color: "#39ff14",
                            },
                          ]}
                          cx="50%"
                          cy="50%"
                          outerRadius={120}
                          dataKey="value"
                          stroke="none"
                        >
                          {[
                            { name: "Community", value: 70, color: "#ff6b35" },
                            {
                              name: "Liquidity Pool",
                              value: 20,
                              color: "#00d9ff",
                            },
                            {
                              name: "Development",
                              value: 10,
                              color: "#39ff14",
                            },
                          ].map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <Tooltip
                          contentStyle={{
                            backgroundColor: "rgba(0, 0, 0, 0.8)",
                            border: "1px solid #ff6b35",
                            borderRadius: "12px",
                            color: "#fff",
                          }}
                        />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                  <div className="grid grid-cols-1 gap-3 mt-6">
                    <div className="flex items-center justify-between p-3 rounded-lg bg-neon-orange/10 border border-neon-orange/30">
                      <div className="flex items-center">
                        <div className="w-4 h-4 rounded-full bg-neon-orange mr-3" />
                        <span className="text-sm font-semibold">Community</span>
                      </div>
                      <span className="text-neon-orange font-bold">70%</span>
                    </div>
                    <div className="flex items-center justify-between p-3 rounded-lg bg-neon-blue/10 border border-neon-blue/30">
                      <div className="flex items-center">
                        <div className="w-4 h-4 rounded-full bg-neon-blue mr-3" />
                        <span className="text-sm font-semibold">
                          Liquidity Pool
                        </span>
                      </div>
                      <span className="text-neon-blue font-bold">20%</span>
                    </div>
                    <div className="flex items-center justify-between p-3 rounded-lg bg-nuclear-glow/10 border border-nuclear-glow/30">
                      <div className="flex items-center">
                        <div className="w-4 h-4 rounded-full bg-nuclear-glow mr-3" />
                        <span className="text-sm font-semibold">
                          Development
                        </span>
                      </div>
                      <span className="text-nuclear-glow font-bold">10%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Utility Breakdown */}
              <Card className="glassmorphism border-nuclear-glow/30 hover-glow p-8">
                <CardHeader className="text-center">
                  <CardTitle className="text-2xl font-pixel text-nuclear-glow mb-4">
                    <BarChart3 className="w-8 h-8 inline mr-2" />
                    Utility Breakdown
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold flex items-center">
                          <Bot className="w-4 h-4 mr-2 text-neon-orange" />
                          Trading Bot Revenue
                        </span>
                        <span className="text-neon-orange font-bold">45%</span>
                      </div>
                      <Progress value={45} className="h-3 bg-background">
                        <div
                          className="h-full bg-gradient-to-r from-neon-orange to-nuclear-glow rounded-full transition-all duration-500"
                          style={{ width: "45%" }}
                        />
                      </Progress>
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold flex items-center">
                          <Vote className="w-4 h-4 mr-2 text-neon-blue" />
                          DAO Voting Power
                        </span>
                        <span className="text-neon-blue font-bold">30%</span>
                      </div>
                      <Progress value={30} className="h-3 bg-background">
                        <div
                          className="h-full bg-gradient-to-r from-neon-blue to-neon-orange rounded-full transition-all duration-500"
                          style={{ width: "30%" }}
                        />
                      </Progress>
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-semibold flex items-center">
                          <Coins className="w-4 h-4 mr-2 text-nuclear-glow" />
                          Staking Rewards
                        </span>
                        <span className="text-nuclear-glow font-bold">25%</span>
                      </div>
                      <Progress value={25} className="h-3 bg-background">
                        <div
                          className="h-full bg-gradient-to-r from-nuclear-glow to-neon-blue rounded-full transition-all duration-500"
                          style={{ width: "25%" }}
                        />
                      </Progress>
                    </div>
                  </div>

                  <div className="mt-8 grid grid-cols-1 gap-4">
                    <Card className="bg-neon-orange/10 border-neon-orange/30 p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-lg font-bold text-neon-orange">
                            $420K
                          </div>
                          <div className="text-xs text-muted-foreground">
                            Bot Revenue (30d)
                          </div>
                        </div>
                        <Activity className="w-8 h-8 text-neon-orange opacity-70" />
                      </div>
                    </Card>

                    <Card className="bg-nuclear-glow/10 border-nuclear-glow/30 p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="text-lg font-bold text-nuclear-glow">
                            47.2%
                          </div>
                          <div className="text-xs text-muted-foreground">
                            Staking APY
                          </div>
                        </div>
                        <Percent className="w-8 h-8 text-nuclear-glow opacity-70" />
                      </div>
                    </Card>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Burn Mechanism & Treasury Stats */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
              {/* Burn Mechanism */}
              <Card className="glassmorphism border-flame/30 hover-glow p-8">
                <CardHeader className="text-center">
                  <CardTitle className="text-2xl font-pixel text-flame mb-4">
                    <Flame className="w-8 h-8 inline mr-2" />
                    Burn Mechanism
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <AreaChart
                        data={[
                          { week: "W1", burned: 1000000, remaining: 999000000 },
                          { week: "W2", burned: 1500000, remaining: 997500000 },
                          { week: "W3", burned: 2100000, remaining: 995400000 },
                          { week: "W4", burned: 2800000, remaining: 992600000 },
                          { week: "W5", burned: 3600000, remaining: 989000000 },
                          { week: "W6", burned: 4500000, remaining: 984500000 },
                        ]}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                        <XAxis dataKey="week" stroke="#999" />
                        <YAxis stroke="#999" />
                        <Tooltip
                          contentStyle={{
                            backgroundColor: "rgba(0, 0, 0, 0.8)",
                            border: "1px solid #ff6b35",
                            borderRadius: "12px",
                            color: "#fff",
                          }}
                        />
                        <Area
                          type="monotone"
                          dataKey="burned"
                          stroke="#ff4444"
                          fill="url(#burnGradient)"
                          strokeWidth={3}
                        />
                        <defs>
                          <linearGradient
                            id="burnGradient"
                            x1="0"
                            y1="0"
                            x2="0"
                            y2="1"
                          >
                            <stop
                              offset="5%"
                              stopColor="#ff4444"
                              stopOpacity={0.8}
                            />
                            <stop
                              offset="95%"
                              stopColor="#ff4444"
                              stopOpacity={0.1}
                            />
                          </linearGradient>
                        </defs>
                      </AreaChart>
                    </ResponsiveContainer>
                  </div>

                  <div className="mt-6 space-y-3">
                    <div className="flex justify-between items-center p-3 rounded-lg bg-flame/10 border border-flame/30">
                      <span className="text-sm font-semibold">
                        Total Burned
                      </span>
                      <span className="text-flame font-bold">23.7M ROACH</span>
                    </div>
                    <div className="flex justify-between items-center p-3 rounded-lg bg-nuclear-glow/10 border border-nuclear-glow/30">
                      <span className="text-sm font-semibold">Burn Rate</span>
                      <span className="text-nuclear-glow font-bold">
                        0.1% / week
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Live Treasury Stats */}
              <Card className="glassmorphism border-neon-blue/30 hover-glow p-8">
                <CardHeader className="text-center">
                  <CardTitle className="text-2xl font-pixel text-neon-blue mb-4">
                    <DollarSign className="w-8 h-8 inline mr-2" />
                    Live Treasury
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 gap-6">
                    <div className="text-center">
                      <div className="text-4xl font-bold text-neon-blue mb-2">
                        $2.47M
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Total Treasury Value
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <Card className="bg-neon-orange/10 border-neon-orange/30 p-4 text-center">
                        <div className="text-xl font-bold text-neon-orange">
                          $1.8M
                        </div>
                        <div className="text-xs text-muted-foreground">
                          SOL Holdings
                        </div>
                      </Card>

                      <Card className="bg-nuclear-glow/10 border-nuclear-glow/30 p-4 text-center">
                        <div className="text-xl font-bold text-nuclear-glow">
                          $670K
                        </div>
                        <div className="text-xs text-muted-foreground">
                          USDC Reserves
                        </div>
                      </Card>
                    </div>

                    <div className="space-y-2">
                      <div className="flex justify-between items-center text-sm">
                        <span>Daily Bot Revenue</span>
                        <span className="text-neon-green font-semibold">
                          +$14.2K
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span>Weekly Buybacks</span>
                        <span className="text-neon-orange font-semibold">
                          $98.5K
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span>Staking Rewards Pool</span>
                        <span className="text-nuclear-glow font-semibold">
                          $156K
                        </span>
                      </div>
                    </div>

                    <Button className="w-full nuclear-gradient hover-glow">
                      <Lock className="w-4 h-4 mr-2" />
                      View Treasury Multisig
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </section>
      <section
        id="hydra-bot"
        className="py-20 relative bg-gradient-to-br from-background to-nuclear-glow/5"
      >
        <ParallaxElement offset={30}>
          <div className="container mx-auto px-4">
            <div className="max-w-7xl mx-auto">
              <RevealOnScroll direction="up" className="text-center mb-16">
                <h2 className="text-4xl md:text-6xl font-pixel text-glow mb-6">
                  <span className="text-nuclear-glow">HYDRA</span>
                  <span className="text-foreground"> BOT</span>
                </h2>
                <TypewriterText 
                  text="Multi-headed AI trading beast. Cut off one strategy, two more emerge."
                  className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed block"
                  speed={50}
                />
              </RevealOnScroll>

              <StaggerContainer className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16" delay={0.3}>
                <StaggerItem>
                  {/* Real Trading Terminal with Live Data */}
                  <ScaleOnHover>
                    <Card className="glassmorphism border-nuclear-glow/30 hover-glow p-8">
                      <CardHeader>
                        <CardTitle className="text-2xl font-pixel text-nuclear-glow mb-4">
                          <Brain className="w-8 h-8 inline mr-2" />
                          Live Trading Terminal
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="bg-black/50 rounded-lg p-4 font-mono text-sm">
                          <div className="flex items-center justify-between mb-4">
                            <div className="flex items-center space-x-2">
                              <div className="w-3 h-3 bg-neon-green rounded-full animate-pulse" />
                              <span className="text-neon-green">
                                {performance?.status === 'ACTIVE' ? 'HYDRA-01 ACTIVE' : 'CONNECTING...'}
                              </span>
                            </div>
                            <div className="text-nuclear-glow">
                              PnL: +$<AnimatedCounter 
                                from={0} 
                                to={performance?.totalPnL || 47239.42} 
                                duration={2}
                                className="inline"
                              />
                            </div>
                          </div>

                          {/* Real Trading Signals */}
                          <div className="space-y-2 text-xs max-h-32 overflow-y-auto">
                            {signalsLoading ? (
                              <div className="text-neon-orange">Loading signals...</div>
                            ) : (
                              signals.slice(0, 5).map((signal, index) => (
                                <div key={signal.id} className="flex justify-between">
                                  <span className="text-muted-foreground">
                                    [{new Date(signal.timestamp).toLocaleTimeString()}]
                                  </span>
                                  <span className={
                                    signal.action === 'BUY' ? 'text-neon-green' :
                                    signal.action === 'SELL' ? 'text-neon-orange' : 'text-neon-blue'
                                  }>
                                    {signal.action} {signal.pair} @ {signal.price} ✓
                                  </span>
                                </div>
                              ))
                            )}
                          </div>

                          <div className="mt-4 pt-4 border-t border-nuclear-glow/30">
                            <div className="grid grid-cols-3 gap-4 text-center">
                              <div>
                                <div className="text-neon-green font-bold">
                                  <AnimatedCounter 
                                    from={0} 
                                    to={performance?.winRate || 94.7} 
                                    duration={2}
                                    suffix="%"
                                    className="inline"
                                  />
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  Win Rate
                                </div>
                              </div>
                              <div>
                                <div className="text-neon-orange font-bold">
                                  <AnimatedCounter 
                                    from={0} 
                                    to={performance?.totalTrades || 127} 
                                    duration={2}
                                    className="inline"
                                  />
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  Total Trades
                          </div>
                        </div>
                              <div>
                                <div className="text-nuclear-glow font-bold">
                                  $<AnimatedCounter 
                                    from={0} 
                                    to={performance?.dailyPnL || 2400} 
                                    duration={2}
                                    className="inline"
                                  />
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  Daily P&L
                                </div>
                              </div>
                      </div>
                    </div>
                  </div>

                  <div className="mt-6 grid grid-cols-2 gap-4">
                    <Button className="bg-neon-green/20 text-neon-green border-neon-green/50 hover:bg-neon-green/30">
                      <PlayCircle className="w-4 h-4 mr-2" />
                      Start Bot
                    </Button>
                    <Button className="bg-flame/20 text-flame border-flame/50 hover:bg-flame/30">
                      <StopCircle className="w-4 h-4 mr-2" />
                      Stop Bot
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* AI Performance Metrics */}
              <Card className="glassmorphism border-neon-orange/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-neon-orange mb-4">
                    <Activity className="w-8 h-8 inline mr-2" />
                    Performance Metrics
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={[
                          { day: "Mon", profit: 2100, volume: 45000 },
                          { day: "Tue", profit: 2800, volume: 52000 },
                          { day: "Wed", profit: 1900, volume: 48000 },
                          { day: "Thu", profit: 3400, volume: 61000 },
                          { day: "Fri", profit: 4200, volume: 58000 },
                          { day: "Sat", profit: 3800, volume: 67000 },
                          { day: "Sun", profit: 4500, volume: 72000 },
                        ]}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                        <XAxis dataKey="day" stroke="#999" />
                        <YAxis stroke="#999" />
                        <Tooltip
                          contentStyle={{
                            backgroundColor: "rgba(0, 0, 0, 0.8)",
                            border: "1px solid #ff6b35",
                            borderRadius: "12px",
                            color: "#fff",
                          }}
                        />
                        <Line
                          type="monotone"
                          dataKey="profit"
                          stroke="#ff6b35"
                          strokeWidth={3}
                          dot={{ fill: "#ff6b35", strokeWidth: 2, r: 6 }}
                          activeDot={{
                            r: 8,
                            stroke: "#ff6b35",
                            strokeWidth: 2,
                          }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>

                  <div className="mt-6 grid grid-cols-2 gap-4">
                    <Card className="bg-nuclear-glow/10 border-nuclear-glow/30 p-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-nuclear-glow">
                          247%
                        </div>
                        <div className="text-xs text-muted-foreground">
                          Monthly ROI
                        </div>
                      </div>
                    </Card>

                    <Card className="bg-neon-blue/10 border-neon-blue/30 p-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-neon-blue">
                          $1.2M
                        </div>
                        <div className="text-xs text-muted-foreground">AUM</div>
                      </div>
                    </Card>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Live Trading Signals & Bot Stats */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
              {/* Live Trading Signals */}
              <Card className="glassmorphism border-neon-green/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-neon-green mb-4">
                    <Trending className="w-8 h-8 inline mr-2" />
                    Live Signals Feed
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      {
                        token: "SOL/USDC",
                        action: "BUY",
                        confidence: 94,
                        price: "$98.47",
                      },
                      {
                        token: "BONK/SOL",
                        action: "SELL",
                        confidence: 87,
                        price: "$0.000023",
                      },
                      {
                        token: "JUP/USDC",
                        action: "HOLD",
                        confidence: 76,
                        price: "$0.67",
                      },
                      {
                        token: "RAY/SOL",
                        action: "BUY",
                        confidence: 92,
                        price: "$4.23",
                      },
                      {
                        token: "ORCA/USDC",
                        action: "SELL",
                        confidence: 89,
                        price: "$3.45",
                      },
                    ].map((signal, index) => (
                      <div
                        key={index}
                        className="flex items-center justify-between p-4 rounded-lg bg-background/50 border border-nuclear-glow/20"
                      >
                        <div className="flex items-center space-x-4">
                          <div
                            className={`w-3 h-3 rounded-full ${
                              signal.action === "BUY"
                                ? "bg-neon-green animate-pulse"
                                : signal.action === "SELL"
                                  ? "bg-flame animate-pulse"
                                  : "bg-neon-orange animate-pulse"
                            }`}
                          ></div>
                          <div>
                            <div className="font-semibold">{signal.token}</div>
                            <div className="text-xs text-muted-foreground">
                              {signal.price}
                            </div>
                          </div>
                        </div>
                        <div className="text-right">
                          <div
                            className={`font-bold ${
                              signal.action === "BUY"
                                ? "text-neon-green"
                                : signal.action === "SELL"
                                  ? "text-flame"
                                  : "text-neon-orange"
                            }`}
                          >
                            {signal.action}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {signal.confidence}% conf.
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <Button className="w-full mt-6 nuclear-gradient hover-glow">
                    <Eye className="w-4 h-4 mr-2" />
                    View All Signals
                  </Button>
                </CardContent>
              </Card>

              {/* Bot Success Rate Charts */}
              <Card className="glassmorphism border-neon-blue/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-neon-blue mb-4">
                    <Trophy className="w-8 h-8 inline mr-2" />
                    Success Rate Analysis
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={[
                          { strategy: "Arbitrage", success: 96, trades: 1247 },
                          {
                            strategy: "Trend Follow",
                            success: 89,
                            trades: 892,
                          },
                          { strategy: "Mean Revert", success: 87, trades: 634 },
                          {
                            strategy: "Grid Trading",
                            success: 94,
                            trades: 1456,
                          },
                          { strategy: "Scalping", success: 91, trades: 2341 },
                        ]}
                      >
                        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                        <XAxis
                          dataKey="strategy"
                          stroke="#999"
                          angle={-45}
                          textAnchor="end"
                          height={60}
                        />
                        <YAxis stroke="#999" />
                        <Tooltip
                          contentStyle={{
                            backgroundColor: "rgba(0, 0, 0, 0.8)",
                            border: "1px solid #00d9ff",
                            borderRadius: "12px",
                            color: "#fff",
                          }}
                        />
                        <Bar
                          dataKey="success"
                          fill="#00d9ff"
                          radius={[4, 4, 0, 0]}
                        />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>

                  <div className="mt-6 space-y-3">
                    <div className="flex justify-between items-center p-3 rounded-lg bg-neon-green/10 border border-neon-green/30">
                      <span className="text-sm font-semibold">
                        Average Success Rate
                      </span>
                      <span className="text-neon-green font-bold">91.4%</span>
                    </div>
                    <div className="flex justify-between items-center p-3 rounded-lg bg-neon-orange/10 border border-neon-orange/30">
                      <span className="text-sm font-semibold">
                        Total Trades (30d)
                      </span>
                      <span className="text-neon-orange font-bold">6,570</span>
                    </div>
                    <div className="flex justify-between items-center p-3 rounded-lg bg-nuclear-glow/10 border border-nuclear-glow/30">
                      <span className="text-sm font-semibold">
                        Net Profit (30d)
                      </span>
                      <span className="text-nuclear-glow font-bold">
                        $47,239
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </section>

      {/* Interactive Roadmap Section */}
      <section
        id="roadmap"
        className="py-20 relative bg-gradient-to-br from-background to-neon-blue/5"
      >
        <div className="container mx-auto px-4">
          <div className="max-w-6xl mx-auto">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-6xl font-pixel text-glow mb-6">
                <span className="text-neon-blue">ROAD</span>
                <span className="text-foreground">MAP</span>
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                From nuclear wasteland to digital dominance. Every milestone
                brings us closer to meme coin supremacy.
              </p>
            </div>

            <div className="space-y-12">
              {/* Phase 1 - Completed */}
              <div className="relative">
                <div className="flex items-center mb-6">
                  <div className="w-12 h-12 rounded-full bg-neon-green border-4 border-neon-green/30 flex items-center justify-center mr-6">
                    <CheckCircle className="w-6 h-6 text-background" />
                  </div>
                  <div>
                    <h3 className="text-2xl font-pixel text-neon-green">
                      PHASE 1: GENESIS
                    </h3>
                    <p className="text-muted-foreground">
                      Nuclear Birth & Community Building
                    </p>
                  </div>
                  <div className="ml-auto">
                    <Badge className="bg-neon-green/20 text-neon-green border-neon-green/30">
                      COMPLETED
                    </Badge>
                  </div>
                </div>

                <Card className="glassmorphism border-neon-green/30 hover-glow ml-18">
                  <CardContent className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          Token Launch on Solana
                        </div>
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          Initial Liquidity Pool
                        </div>
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          Community Discord/Telegram
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          Website & Branding
                        </div>
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          First CEX Listing
                        </div>
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          1000+ Holders
                        </div>
                      </div>
                    </div>
                    <Progress value={100} className="mt-4 h-2" />
                  </CardContent>
                </Card>
              </div>

              {/* Phase 2 - In Progress */}
              <div className="relative">
                <div className="flex items-center mb-6">
                  <div className="w-12 h-12 rounded-full bg-neon-orange border-4 border-neon-orange/30 flex items-center justify-center mr-6 animate-pulse-glow">
                    <Clock className="w-6 h-6 text-background" />
                  </div>
                  <div>
                    <h3 className="text-2xl font-pixel text-neon-orange">
                      PHASE 2: EVOLUTION
                    </h3>
                    <p className="text-muted-foreground">
                      Hydra Bot & Advanced Features
                    </p>
                  </div>
                  <div className="ml-auto">
                    <Badge className="bg-neon-orange/20 text-neon-orange border-neon-orange/30 animate-pulse">
                      IN PROGRESS
                    </Badge>
                  </div>
                </div>

                <Card className="glassmorphism border-neon-orange/30 hover-glow ml-18">
                  <CardContent className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          Hydra Bot Alpha Release
                        </div>
                        <div className="flex items-center text-sm">
                          <Clock className="w-4 h-4 text-neon-orange mr-2 animate-spin" />
                          Advanced Trading Strategies
                        </div>
                        <div className="flex items-center text-sm">
                          <Clock className="w-4 h-4 text-neon-orange mr-2 animate-spin" />
                          DAO Governance Launch
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div className="flex items-center text-sm">
                          <CheckCircle className="w-4 h-4 text-neon-green mr-2" />
                          Staking Platform
                        </div>
                        <div className="flex items-center text-sm">
                          <Clock className="w-4 h-4 text-neon-orange mr-2 animate-spin" />
                          Major CEX Listings
                        </div>
                        <div className="flex items-center text-sm">
                          <Clock className="w-4 h-4 text-neon-orange mr-2 animate-spin" />
                          10K+ Holders
                        </div>
                      </div>
                    </div>
                    <Progress value={67} className="mt-4 h-2" />
                    <div className="text-right mt-2 text-sm text-neon-orange font-semibold">
                      67% Complete
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Phase 3 - Upcoming */}
              <div className="relative">
                <div className="flex items-center mb-6">
                  <div className="w-12 h-12 rounded-full bg-nuclear-glow border-4 border-nuclear-glow/30 flex items-center justify-center mr-6">
                    <Rocket className="w-6 h-6 text-background" />
                  </div>
                  <div>
                    <h3 className="text-2xl font-pixel text-nuclear-glow">
                      PHASE 3: DOMINATION
                    </h3>
                    <p className="text-muted-foreground">
                      Multi-Chain & Mass Adoption
                    </p>
                  </div>
                  <div className="ml-auto">
                    <Badge className="bg-nuclear-glow/20 text-nuclear-glow border-nuclear-glow/30">
                      Q2 2025
                    </Badge>
                  </div>
                </div>

                <Card className="glassmorphism border-nuclear-glow/30 hover-glow ml-18">
                  <CardContent className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Multi-Chain Bridge
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          NFT Collection Launch
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Mobile App Release
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Tier 1 CEX Listings
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Strategic Partnerships
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          100K+ Holders
                        </div>
                      </div>
                    </div>
                    <Progress value={0} className="mt-4 h-2" />
                  </CardContent>
                </Card>
              </div>

              {/* Phase 4 - Future */}
              <div className="relative">
                <div className="flex items-center mb-6">
                  <div className="w-12 h-12 rounded-full bg-neon-blue border-4 border-neon-blue/30 flex items-center justify-center mr-6">
                    <Crown className="w-6 h-6 text-background" />
                  </div>
                  <div>
                    <h3 className="text-2xl font-pixel text-neon-blue">
                      PHASE 4: IMMORTALITY
                    </h3>
                    <p className="text-muted-foreground">
                      Ecosystem & Legacy Building
                    </p>
                  </div>
                  <div className="ml-auto">
                    <Badge className="bg-neon-blue/20 text-neon-blue border-neon-blue/30">
                      Q4 2025
                    </Badge>
                  </div>
                </div>

                <Card className="glassmorphism border-neon-blue/30 hover-glow ml-18">
                  <CardContent className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          DeFi Protocol Launch
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Metaverse Integration
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          AI Model Marketplace
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Global Recognition
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          Institutional Adoption
                        </div>
                        <div className="flex items-center text-sm text-muted-foreground">
                          <Clock className="w-4 h-4 mr-2" />
                          1M+ Holders
                        </div>
                      </div>
                    </div>
                    <Progress value={0} className="mt-4 h-2" />
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Community Section */}
      <section
        id="community"
        className="py-20 relative bg-gradient-to-br from-background to-neon-green/5"
      >
        <div className="container mx-auto px-4">
          <div className="max-w-7xl mx-auto">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-6xl font-pixel text-glow mb-6">
                <span className="text-neon-green">ROACH</span>
                <span className="text-foreground"> ARMY</span>
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
                United we survive, divided we multiply. Join the unstoppable
                force that refuses to be exterminated.
              </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
              {/* Social Media Feed */}
              <Card className="glassmorphism border-neon-green/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-neon-green mb-4">
                    <MessageCircle className="w-8 h-8 inline mr-2" />
                    Live Social Feed
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      {
                        platform: "twitter",
                        user: "@RoachKing",
                        content:
                          "Just bought the dip! 🚀 $BOOMROACH to the moon!",
                        time: "2m ago",
                        likes: 47,
                        color: "neon-blue",
                      },
                      {
                        platform: "telegram",
                        user: "NuclearRoach",
                        content:
                          "Hydra bot is CRUSHING it today! +234% gains 💪",
                        time: "5m ago",
                        likes: 23,
                        color: "neon-orange",
                      },
                      {
                        platform: "twitter",
                        user: "@CryptoSurvivor",
                        content:
                          "Best meme coin community ever! Love the energy ⚡",
                        time: "8m ago",
                        likes: 156,
                        color: "nuclear-glow",
                      },
                      {
                        platform: "telegram",
                        user: "DiamondRoach",
                        content:
                          "Staking rewards just hit! 47% APY is insane 🔥",
                        time: "12m ago",
                        likes: 89,
                        color: "neon-green",
                      },
                    ].map((post, index) => (
                      <div
                        key={index}
                        className="p-4 rounded-lg bg-background/50 border border-nuclear-glow/20 hover:border-nuclear-glow/40 transition-all"
                      >
                        <div className="flex items-start space-x-3">
                          <div
                            className={`w-8 h-8 rounded-full bg-${post.color}/20 border border-${post.color}/30 flex items-center justify-center`}
                          >
                            {post.platform === "twitter" ? (
                              <Twitter className="w-4 h-4" />
                            ) : (
                              <Send className="w-4 h-4" />
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-semibold text-sm">
                                {post.user}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                {post.time}
                              </span>
                            </div>
                            <p className="text-sm mb-2">{post.content}</p>
                            <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                              <div className="flex items-center">
                                <Heart className="w-3 h-3 mr-1" />
                                {post.likes}
                              </div>
                              <div className="flex items-center">
                                <Share2 className="w-3 h-3 mr-1" />
                                Share
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="mt-6 grid grid-cols-2 gap-4">
                    <Button className="bg-neon-blue/20 text-neon-blue border-neon-blue/50 hover:bg-neon-blue/30">
                      <Twitter className="w-4 h-4 mr-2" />
                      Follow Twitter
                    </Button>
                    <Button className="bg-neon-orange/20 text-neon-orange border-neon-orange/50 hover:bg-neon-orange/30">
                      <Send className="w-4 h-4 mr-2" />
                      Join Telegram
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* DAO Voting Interface */}
              <Card className="glassmorphism border-neon-orange/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-neon-orange mb-4">
                    <Vote className="w-8 h-8 inline mr-2" />
                    DAO Governance
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    <Card className="bg-nuclear-glow/10 border-nuclear-glow/30 p-4">
                      <div className="mb-4">
                        <h4 className="font-semibold text-nuclear-glow mb-2">
                          Proposal #42: Increase Bot Revenue Share
                        </h4>
                        <p className="text-sm text-muted-foreground">
                          Increase community revenue share from 70% to 80%
                        </p>
                      </div>

                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <span className="text-sm">For: 73.4%</span>
                          <span className="text-sm">Against: 26.6%</span>
                        </div>
                        <Progress value={73.4} className="h-2" />
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>8,247 votes</span>
                          <span>2 days left</span>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-2 mt-4">
                        <Button
                          size="sm"
                          className="bg-neon-green/20 text-neon-green border-neon-green/50"
                        >
                          Vote For
                        </Button>
                        <Button
                          size="sm"
                          className="bg-flame/20 text-flame border-flame/50"
                        >
                          Vote Against
                        </Button>
                      </div>
                    </Card>

                    <Card className="bg-neon-blue/10 border-neon-blue/30 p-4">
                      <div className="mb-4">
                        <h4 className="font-semibold text-neon-blue mb-2">
                          Proposal #41: New Trading Strategy
                        </h4>
                        <p className="text-sm text-muted-foreground">
                          Implement cross-chain arbitrage in Hydra Bot
                        </p>
                      </div>

                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <span className="text-sm">For: 89.2%</span>
                          <span className="text-sm">Against: 10.8%</span>
                        </div>
                        <Progress value={89.2} className="h-2" />
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>12,456 votes</span>
                          <span>Passed ✓</span>
                        </div>
                      </div>
                    </Card>

                    <Button className="w-full nuclear-gradient hover-glow">
                      <Settings className="w-4 h-4 mr-2" />
                      View All Proposals
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
              {/* Community Statistics */}
              <Card className="glassmorphism border-neon-blue/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-neon-blue mb-4">
                    <Users className="w-8 h-8 inline mr-2" />
                    Community Stats
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-6">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-neon-orange">
                        24.7K
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Discord Members
                      </div>
                    </div>

                    <div className="text-center">
                      <div className="text-3xl font-bold text-nuclear-glow">
                        31.2K
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Telegram Members
                      </div>
                    </div>

                    <div className="text-center">
                      <div className="text-3xl font-bold text-neon-green">
                        47.8K
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Twitter Followers
                      </div>
                    </div>

                    <div className="text-center">
                      <div className="text-3xl font-bold text-neon-blue">
                        12.5K
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Unique Holders
                      </div>
                    </div>
                  </div>

                  <Separator className="my-6" />

                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Daily Active Users</span>
                      <span className="text-neon-green font-semibold">
                        8,247
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Community Growth (30d)</span>
                      <span className="text-nuclear-glow font-semibold">
                        +247%
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm">Average Online</span>
                      <span className="text-neon-orange font-semibold">
                        3,456
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Meme Gallery */}
              <Card className="glassmorphism border-nuclear-glow/30 hover-glow p-8">
                <CardHeader>
                  <CardTitle className="text-2xl font-pixel text-nuclear-glow mb-4">
                    <Image className="w-8 h-8 inline mr-2" />
                    Meme Gallery
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4 mb-6">
                    {[
                      "https://ext.same-assets.com/3224214395/4224792650.png",
                      "https://ext.same-assets.com/3224214395/842254662.png",
                      "https://ext.same-assets.com/3224214395/1748105708.png",
                      "https://ext.same-assets.com/3224214395/4224792650.png",
                    ].map((url, index) => (
                      <div
                        key={index}
                        className="relative group cursor-pointer"
                      >
                        <div className="aspect-square rounded-lg overflow-hidden bg-nuclear-glow/10 border border-nuclear-glow/30 hover:border-nuclear-glow/50 transition-all">
                          <img
                            src={url}
                            alt={`Meme ${index + 1}`}
                            className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                          />
                        </div>
                        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 rounded-lg flex items-center justify-center">
                          <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                            <ThumbsUp className="w-6 h-6 text-white" />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="space-y-3">
                    <Button className="w-full bg-nuclear-glow/20 text-nuclear-glow border-nuclear-glow/50 hover:bg-nuclear-glow/30">
                      <Upload className="w-4 h-4 mr-2" />
                      Submit Your Meme
                    </Button>

                    <div className="text-center text-sm text-muted-foreground">
                      Best memes get featured & rewarded with $ROACH tokens!
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-16 bg-black/30 border-t border-nuclear-glow/20">
        <div className="container mx-auto px-4">
          <div className="max-w-6xl mx-auto">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-12">
              {/* Brand */}
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <div className="text-2xl font-pixel text-neon-orange text-glow">
                    $BOOMROACH
                  </div>
                </div>
                <p className="text-sm text-muted-foreground leading-relaxed">
                  The unkillable meme coin that survives everything and
                  multiplies profits. Nuclear-powered, AI-enhanced,
                  community-owned.
                </p>
                <div className="flex space-x-4">
                  <a
                    href="#"
                    className="w-10 h-10 rounded-full bg-neon-blue/20 border border-neon-blue/30 flex items-center justify-center hover:bg-neon-blue/30 transition-colors"
                  >
                    <Twitter className="w-5 h-5 text-neon-blue" />
                  </a>
                  <a
                    href="#"
                    className="w-10 h-10 rounded-full bg-neon-orange/20 border border-neon-orange/30 flex items-center justify-center hover:bg-neon-orange/30 transition-colors"
                  >
                    <Send className="w-5 h-5 text-neon-orange" />
                  </a>
                  <a
                    href="#"
                    className="w-10 h-10 rounded-full bg-nuclear-glow/20 border border-nuclear-glow/30 flex items-center justify-center hover:bg-nuclear-glow/30 transition-colors"
                  >
                    <Github className="w-5 h-5 text-nuclear-glow" />
                  </a>
                  <a
                    href="#"
                    className="w-10 h-10 rounded-full bg-neon-green/20 border border-neon-green/30 flex items-center justify-center hover:bg-neon-green/30 transition-colors"
                  >
                    <Globe className="w-5 h-5 text-neon-green" />
                  </a>
                </div>
              </div>

              {/* Quick Links */}
              <div>
                <h4 className="font-pixel text-lg text-neon-orange mb-4">
                  Quick Links
                </h4>
                <div className="space-y-2">
                  <a
                    href="#about"
                    className="block text-sm text-muted-foreground hover:text-neon-orange transition-colors"
                  >
                    About
                  </a>
                  <a
                    href="#tokenomics"
                    className="block text-sm text-muted-foreground hover:text-neon-orange transition-colors"
                  >
                    Tokenomics
                  </a>
                  <a
                    href="#hydra-bot"
                    className="block text-sm text-muted-foreground hover:text-neon-orange transition-colors"
                  >
                    Hydra Bot
                  </a>
                  <a
                    href="#roadmap"
                    className="block text-sm text-muted-foreground hover:text-neon-orange transition-colors"
                  >
                    Roadmap
                  </a>
                  <a
                    href="#community"
                    className="block text-sm text-muted-foreground hover:text-neon-orange transition-colors"
                  >
                    Community
                  </a>
                </div>
              </div>

              {/* Resources */}
              <div>
                <h4 className="font-pixel text-lg text-nuclear-glow mb-4">
                  Resources
                </h4>
                <div className="space-y-2">
                  <a
                    href="#"
                    className="block text-sm text-muted-foreground hover:text-nuclear-glow transition-colors"
                  >
                    Whitepaper
                  </a>
                  <a
                    href="#"
                    className="block text-sm text-muted-foreground hover:text-nuclear-glow transition-colors"
                  >
                    Documentation
                  </a>
                  <a
                    href="#"
                    className="block text-sm text-muted-foreground hover:text-nuclear-glow transition-colors"
                  >
                    Smart Contract
                  </a>
                  <a
                    href="#"
                    className="block text-sm text-muted-foreground hover:text-nuclear-glow transition-colors"
                  >
                    Audit Report
                  </a>
                  <a
                    href="#"
                    className="block text-sm text-muted-foreground hover:text-nuclear-glow transition-colors"
                  >
                    Brand Kit
                  </a>
                </div>
              </div>

              {/* Newsletter */}
              <div>
                <h4 className="font-pixel text-lg text-neon-blue mb-4">
                  Stay Updated
                </h4>
                <p className="text-sm text-muted-foreground mb-4">
                  Get the latest updates on $BOOMROACH development and community
                  news.
                </p>
                <div className="space-y-3">
                  <div className="flex">
                    <input
                      type="email"
                      placeholder="Enter your email"
                      className="flex-1 px-3 py-2 bg-background border border-nuclear-glow/30 rounded-l-lg text-sm focus:outline-none focus:border-nuclear-glow/50"
                    />
                    <Button className="rounded-l-none nuclear-gradient">
                      <Mail className="w-4 h-4" />
                    </Button>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    No spam, only roach-related content!
                  </div>
                </div>
              </div>
            </div>

            <Separator className="mb-8 opacity-20" />

            {/* Legal & Copyright */}
            <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
              <div className="text-sm text-muted-foreground">
                © 2025 BoomRoach. All rights reserved. Built by the roach army,
                for the roach army.
              </div>

              <div className="flex space-x-6 text-xs text-muted-foreground">
                <a
                  href="#"
                  className="hover:text-neon-orange transition-colors"
                >
                  Privacy Policy
                </a>
                <a
                  href="#"
                  className="hover:text-neon-orange transition-colors"
                >
                  Terms of Service
                </a>
                <a
                  href="#"
                  className="hover:text-neon-orange transition-colors"
                >
                  Risk Disclaimer
                </a>
              </div>
            </div>

            {/* Disclaimer */}
            <div className="mt-8 p-4 rounded-lg bg-nuclear-glow/5 border border-nuclear-glow/20">
              <p className="text-xs text-muted-foreground leading-relaxed">
                <strong className="text-nuclear-glow">DISCLAIMER:</strong>{" "}
                $BOOMROACH is a meme token created for entertainment purposes.
                This is not financial advice. Cryptocurrency investments are
                highly risky and volatile. Only invest what you can afford to
                lose. We are not responsible for any financial losses. Always do
                your own research (DYOR) before making any investment decisions.
                Past performance does not guarantee future results. The roach
                army is strong, but markets are unpredictable.
              </p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
